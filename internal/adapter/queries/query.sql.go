// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countMovies = `-- name: CountMovies :one
SELECT COUNT(movies) FROM movies
`

func (q *Queries) CountMovies(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countMovies)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (
  title, description, director
) VALUES (
  $1, $2, $3
)
RETURNING id, title, description, director, created_at, release_date
`

type CreateMovieParams struct {
	Title       string
	Description string
	Director    string
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRow(ctx, createMovie, arg.Title, arg.Description, arg.Director)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Director,
		&i.CreatedAt,
		&i.ReleaseDate,
	)
	return i, err
}

const createRating = `-- name: CreateRating :one
INSERT INTO ratings (
  movie_id, rating
) VALUES (
  $1, $2
)
RETURNING id, movie_id, rating, created_at
`

type CreateRatingParams struct {
	MovieID int64
	Rating  pgtype.Numeric
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRow(ctx, createRating, arg.MovieID, arg.Rating)
	var i Rating
	err := row.Scan(
		&i.ID,
		&i.MovieID,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies
WHERE movies.id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT movies.id, movies.title, movies.description, movies.director, movies.created_at, movies.release_date,COALESCE(AVG(ratings.rating), 0.0) AS average_rating
FROM movies
LEFT JOIN ratings 
ON movies.id = ratings.movie_id
WHERE movies.id = $1 
GROUP BY movies.id
LIMIT 1
`

type GetMovieRow struct {
	ID            int64
	Title         string
	Description   string
	Director      string
	CreatedAt     pgtype.Timestamptz
	ReleaseDate   pgtype.Date
	AverageRating interface{}
}

func (q *Queries) GetMovie(ctx context.Context, id int64) (GetMovieRow, error) {
	row := q.db.QueryRow(ctx, getMovie, id)
	var i GetMovieRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Director,
		&i.CreatedAt,
		&i.ReleaseDate,
		&i.AverageRating,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many


SELECT movies.id, movies.title, movies.description, movies.director, movies.created_at, movies.release_date,COALESCE(AVG(ratings.rating), 0.0) AS average_rating
FROM movies
LEFT JOIN ratings 
ON movies.id = ratings.movie_id
WHERE (movies.title ILIKE '%' || $1 || '%' OR $1 IS NULL)
  AND (movies.release_date >= $2 OR $2 IS NULL)
  AND (movies.release_date <= $3 OR $3 IS NULL)
GROUP BY movies.id
ORDER BY movies.id 
LIMIT $4 OFFSET $5
`

type ListMoviesParams struct {
	Column1       pgtype.Text
	ReleaseDate   pgtype.Date
	ReleaseDate_2 pgtype.Date
	Limit         int32
	Offset        int32
}

type ListMoviesRow struct {
	ID            int64
	Title         string
	Description   string
	Director      string
	CreatedAt     pgtype.Timestamptz
	ReleaseDate   pgtype.Date
	AverageRating interface{}
}

// -- name: ListMovies :many
// SELECT movies.*,AVG(ratings.rating) AS average_rating
// FROM movies
// LEFT JOIN ratings
// ON movies.id = ratings.movie_id;
func (q *Queries) ListMovies(ctx context.Context, arg ListMoviesParams) ([]ListMoviesRow, error) {
	rows, err := q.db.Query(ctx, listMovies,
		arg.Column1,
		arg.ReleaseDate,
		arg.ReleaseDate_2,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMoviesRow
	for rows.Next() {
		var i ListMoviesRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Director,
			&i.CreatedAt,
			&i.ReleaseDate,
			&i.AverageRating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :exec
UPDATE movies
  set title = $1,
  description = $2,
  director= $3
WHERE movies.id = $1
`

type UpdateMovieParams struct {
	Title       string
	Description string
	Director    string
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) error {
	_, err := q.db.Exec(ctx, updateMovie, arg.Title, arg.Description, arg.Director)
	return err
}
